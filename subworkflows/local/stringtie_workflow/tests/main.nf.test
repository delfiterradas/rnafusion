nextflow_workflow {

    name "Test STRINGTIE_WORKFLOW"
    script "../main.nf"
    workflow "STRINGTIE_WORKFLOW"
    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "stringtie"

    test("Should run stringtie workflow with stringtie = true") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                        [ id:'test', strandedness:'reverse' ], // meta map
                    file("${params.test_data_base}/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file("${params.test_data_base}/genomics/homo_sapiens/genome/genome.gtf", checkIfExists: true)
                ])
                """
            }
            params {
                stringtie = true
                outdir = "$outputDir"
                test_data_base = "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
            )
        }
    }

    test("Should run stringtie workflow with params.all = true") {

        when {
            workflow {
                """
                input[0] = Channel.of([
                        [ id:'test', strandedness:'reverse' ], // meta map
                    file("${params.test_data_base}/genomics/homo_sapiens/illumina/bam/test.paired_end.sorted.bam", checkIfExists: true)
                ])
                input[1] = Channel.of([
                    [ id:'test' ], // meta map
                    file("${params.test_data_base}/genomics/homo_sapiens/genome/genome.gtf", checkIfExists: true)
                ])
                """
            }
            params {
                all = true
                outdir = "$outputDir"
                test_data_base = "https://raw.githubusercontent.com/nf-core/test-datasets/modules/data"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.out).match() },
            )
        }
    }

}
