nextflow_workflow {

    name "Test Subworkflow QC_WORKFLOW"
    script "../main.nf"
    workflow "TRIM_WORKFLOW"
    tag "qc"
    tag "subworkflow"
    tag "fastqc"
    tag "fastp"

    test("TRIM_WORKFLOW - Homo sapiens - FASTQs - fastp - skip_qc == true") {

        when {

            workflow {
                """
                // ch_reads
                input[0] = Channel.of(
                    [
                        [id: "test_fastq"],
                        [
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz", checkIfExists: true)
                        ]
                    ])
                input[1] = Channel.empty()
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.ch_reads_all,
                    workflow.out.ch_fastp_json,
                    workflow.out.versions
                ).match() },
            )
        }
    }

    test("TRIM_WORKFLOW - Homo sapiens - FASTQs - fastp - skip_qc == true + fastp_adaptors") {

        when {

            workflow {
                """
                // ch_reads
                input[0] = Channel.of(
                    [
                        [id: "test_fastq"],
                        [
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz", checkIfExists: true)
                        ]
                    ])
                input[1] = Channel.fromPath('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/delete_me/fastp/adapters.fasta', checkIfExists: true)
                input[2] = true
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                        workflow.out.ch_reads_all,
                        workflow.out.ch_fastp_json,
                        workflow.out.versions
                    ).match() }
            )
        }
    }

    test("TRIM_WORKFLOW - Homo sapiens - FASTQs - fastp skip_qc== false") {

        when {

            workflow {
                """
                // ch_reads
                input[0] = Channel.of(
                    [
                        [id: "test_fastq"],
                        [
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/illumina/fastq/test_1.fastq.gz", checkIfExists: true),
                            file("https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/illumina/fastq/test_2.fastq.gz", checkIfExists: true)
                        ]
                    ])
                input[1] = Channel.empty()
                input[2] = false
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                        workflow.out.ch_reads_all,
                        workflow.out.ch_fastp_json,
                        workflow.out.versions
                    ).match() }
            )
        }
    }

}
