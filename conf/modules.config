/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'ARRIBA_ARRIBA' {
        publishDir = [
            path: { "${params.outdir}/arriba" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix =  { "${meta.id}.arriba" }
    }

    withName: 'ARRIBA_DOWNLOAD' {
        publishDir = [
            path: { "${params.genomes_base}/arriba" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'ARRIBA_VISUALISATION' {
        ext.prefix = { "${meta.id}_combined_fusions_arriba_visualisation" }
        publishDir = [
            path: { "${params.outdir}/arriba_visualisation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CTATSPLICING_STARTOCANCERINTRONS' {
        ext.args = {[
            bam ? "--vis" : "",
            "--sample_name ${meta.id}",
        ].join(" ")}
        publishDir = [
            path: { "${params.outdir}/ctatsplicing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GENCODE_DOWNLOAD' {
        publishDir = [
            path: { "${params.genomes_base}/gencode" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTP' {
        ext.args = { params.trim_tail ? "--trim_tail1 ${params.trim_tail} --trim_tail2 ${params.trim_tail} " : '' }
        publishDir = [
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTP_FOR_FUSIONCATCHER' {
        ext.args = { params.trim_tail_fusioncatcher ? "--trim_tail1 ${params.trim_tail_fusioncatcher} --trim_tail2 ${params.trim_tail_fusioncatcher} " : '' }
        publishDir = [
            path: { "${params.outdir}/fastp_for_fusioncatcher" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQC' {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FASTQC_FOR_FASTP' {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_trimmed" }
        publishDir = [
            path: { "${params.outdir}/fastqc_for_fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FUSIONCATCHER_FUSIONCATCHER' {
        ext.args = {[
            "--limitSjdbInsertNsj ${params.fusioncatcher_limitSjdbInsertNsj}",
            "--skip-blat",
            meta.single_end ? "--single-end" : "",
        ].join(' ')}
    }

    withName: 'FUSIONCATCHER_DOWNLOAD' {
        publishDir = [
            path: { "${params.genomes_base}/fusioncatcher" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*FUSIONINSPECTOR_WORKFLOW:.*:FUSIONINSPECTOR' {
        ext.args = { params.fusioninspector_limitSjdbInsertNsj != 1000000 ? "--STAR_xtra_params \"--limitSjdbInsertNsj ${params.fusioninspector_limitSjdbInsertNsj}\"" : '' }
        ext.args2 = '--annotate --examine_coding_effect'
    }

    withName: 'FUSIONREPORT' {
        ext.args         = { params.no_cosmic ? "--no-cosmic" : "" }
        ext.args2        = "--export csv"
        publishDir = [
            path: { "${params.outdir}/fusionreport/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FUSIONREPORT_DOWNLOAD' {
        ext.args         = { params.no_cosmic ? "--no-cosmic" : params.qiagen ? "--qiagen --cosmic_usr ${params.cosmic_username} --cosmic_passwd ${params.cosmic_passwd}" : "--cosmic_usr ${params.cosmic_username} --cosmic_passwd ${params.cosmic_passwd}" }
        publishDir = [
            path: { "${params.genomes_base}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_BEDTOINTERVALLIST' {
        publishDir = [
            path: { "${params.genomes_base}/gencode" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GATK4_MARKDUPLICATES' {
        publishDir = [
            path: { "${params.outdir}/picard" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'GFFREAD' {
        ext.args = { '-w -S' }
        publishDir = [
            path: { "${params.genomes_base}/gffread" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'GTF_TO_REFFLAT' {
        ext.args = "-genePredExt -geneNameAsName2 -ignoreGroupsWithoutExons"
        publishDir = [
            path: { "${params.genomes_base}/gencode" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'HGNC_DOWNLOAD' {
        publishDir = [
            path: { "${params.genomes_base}/hgnc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = {params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''}
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PICARD_COLLECTINSERTSIZEMETRICS' {
        ext.prefix       = { "${meta.id}_collectinsertsize"}
        publishDir = [
            path: { "${params.outdir}/picard" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }


    withName:PICARD_COLLECTRNASEQMETRICS {
        ext.args = { ( meta.strandedness == "forward" || meta.single_end ) ?
            "--STRAND_SPECIFICITY FIRST_READ_TRANSCRIPTION_STRAND" :
            meta.strandedness == "reverse" ?
            "--STRAND_SPECIFICITY SECOND_READ_TRANSCRIPTION_STRAND" :
            "--STRAND_SPECIFICITY NONE"
        }
        publishDir = [
            path: { "${params.outdir}/picard" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'SALMON_INDEX' {
        publishDir = [
            path: { "${params.genomes_base}/salmon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'SALMON_QUANT' {
        ext.args = { [
            '--gcBias',
            '--validateMappings'
            ].join(' ') }
        publishDir = [
            path: { "${params.outdir}/salmon" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.genomes_base}/gencode" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'SAMTOOLS_CONVERT' {
        ext.prefix = { "${meta.id}.Aligned.sortedByCoord.out" }
        publishDir = [
            path: { "${params.outdir}/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'STAR_ALIGN' {
        publishDir = [
            path: { "${params.outdir}/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args = { [
            "--outReadsUnmapped None",
            "--outSAMattrRGline 'ID:${meta.id}' 'SM:${meta.id}'${meta.seq_center ? " 'CN:${meta.seq_center}'": ''}${meta.seq_platform ? "' PL:${meta.seq_platform}'": ''}",
            "--outSAMstrandField intronMotif",
            "--chimOutJunctionFormat 1",
            "--twopassMode None",
            "--outFilterMultimapNmax 50",
            "--chimMultimapNmax 50",
            "--quantMode GeneCounts",
            "--outSAMunmapped Within",
            "--readFilesCommand zcat ",
            "--alignSJstitchMismatchNmax 5 -1 5 5",
            "--outSAMtype BAM SortedByCoordinate",
            "--chimSegmentMin 10",
            "--peOverlapNbasesMin 10",
            "--alignSplicedMateMapLminOverLmate 0.5",
            "--chimJunctionOverhangMin 10",
            "--chimScoreJunctionNonGTAG 0",
            "--chimScoreDropMax 30",
            "--chimScoreSeparation 1 ",
            "--chimSegmentReadGapMax 3",
            "--chimOutType Junctions WithinBAM",
            params.star_limit_bam_sort_ram > 0 ? "--limitBAMsortRAM ${params.star_limit_bam_sort_ram}" : ""
            ].join(' ') }
    }

    withName: 'STAR_GENOMEGENERATE' {
        ext.args = "--sjdbOverhang ${params.read_length - 1}"
        cpus   = { 24    * task.attempt }
        memory = { 100.GB * task.attempt }
        time   = { 2.d  * task.attempt }
        publishDir = [
            path: { "${params.genomes_base}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'STARFUSION_BUILD' {
        ext.args = { params.species.contains("homo_sapiens") ? "--human_gencode_filter": '' }
        cpus   = { 24    * task.attempt }
        memory = { 100.GB * task.attempt }
        time   = { 2.d  * task.attempt }
        publishDir = [
            path: { "${params.genomes_base}/starfusion" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: 'CTATSPLICING_PREPGENOMELIB' {
        cpus   = { 1    * task.attempt }
        memory = { 20.GB * task.attempt }
        publishDir = [
            path: { "${params.genomes_base}/starfusion" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
        ext.args = "--max_readlength ${params.read_length} --human_gencode_filter"
    }


    withName: 'STRINGTIE_MERGE' {
        publishDir = [
            path: { "${params.outdir}/stringtie/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
