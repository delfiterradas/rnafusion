nextflow_process {

    name "Test Process STARFUSION"
    script "../main.nf"
    process "STARFUSION"

    setup {
        run("STARFUSION_BUILD") {
            script "../../../starfusion/build/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome fasta' ],
                    file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/minigenome.fa")
                ]
                input[1] = [
                    [ id:'minigenome gtf' ],
                    file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/minigenome.gtf")
                ]

                input [2] = file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/CTAT_HumanFusionLib.mini.dat.gz")
                input [3] = "human"
                """
            }
        }
    }

    test("Should run without failures") {

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_1.fastq.gz"),
                        file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_2.fastq.gz")
                    ], // reads
                    [] // empty list for junction, as we don't have a pre-computed Chimeric.out.junction file
                ]
                input[1] = STARFUSION_BUILD.out.reference.map { it[1] }
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out.fusions,
                process.out.abridged,
                process.out.coding_effect,
                process.out.versions
            ).match()
        }

    }

    test("Should create stub files") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                    [ id:'test_stub', single_end:false ],
                    [
                        file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_1.fastq.gz"),
                        file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_2.fastq.gz")
                    ],
                    [] // empty list for junction
                ]
                input[1] = STARFUSION_BUILD.out.reference.map { it[1] }
                """
            }
        }

        then {
            assert process.success
            assert snapshot(
                process.out
            ).match()
        }

    }

}
