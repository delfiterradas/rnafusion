nextflow_process {

    name "Test Process VCF_COLLECT"
    script "../main.nf"
    process "VCF_COLLECT"
    config './nextflow.config'

    test("VCF_COLLECT - human - fusionreport - fusioninspector") {
        config './nextflow.config'

        setup {
            run("STARFUSION_BUILD") {
                script "../../../nf-core/starfusion/build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'minigenome_fasta' ],
                        file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/minigenome.fa')
                    ]
                    input[1] = [
                        [ id:'minigenome_gtf' ],
                        file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/minigenome.gtf')
                    ]
                    input[2] = file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/CTAT_HumanFusionLib.mini.dat.gz')
                    input[3] = "homo_sapiens"
                    input[4] = "http://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam37.4/Pfam-A.hmm.gz"
                    input[5] = Channel.of([
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3f",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3i",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3m",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3p"
                    ])
                    input[6] = "https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/AnnotFilterRule.pm"
                    """
                }
            }

            run("FUSIONINSPECTOR") {
                script "../../fusioninspector/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test', single_end:false ], // meta map
                        [
                            file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_1.fastq.gz"),
                            file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_2.fastq.gz")
                        ], // reads
                        [file("https://github.com/FusionInspector/FusionInspector/raw/master/test/fusion_targets.A.txt")]
                    ])
                    input[1] = STARFUSION_BUILD.out.reference
                    """
                }
            }

            run("FUSIONREPORT_DOWNLOAD") {
                script "../../../nf-core/fusionreport/download/main.nf"
                process {
                    """
                    """
                }
            }

            run("FUSIONREPORT_DETECT") {
                script "../../../nf-core/fusionreport/detect/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test_sample' ], // meta map
                        file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/arriba.tsv', checkIfExists: true),
                        file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/starfusion.tsv', checkIfExists: true),
                        file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/fusioncatcher.txt', checkIfExists: true)
                    ])
                    input[1] = FUSIONREPORT_DOWNLOAD.out.fusionreport_ref
                    input[2] = 1
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([ id:'test_sample' ])
                    .combine(FUSIONINSPECTOR.out.abridged_tsv.collect{ meta, tsv -> tsv })
                    .combine(FUSIONINSPECTOR.out.out_gtf.collect{ meta, gtf -> gtf })
                    .combine(FUSIONREPORT_DETECT.out.report.collect{ meta, report -> report })
                    .combine(FUSIONREPORT_DETECT.out.csv.collect{ meta, csv -> csv })
                input[1] = [[ id:'hgnc' ], file("https://github.com/nf-core/test-datasets/raw/rnafusion/testdata/reference/hgnc/hgnc_complete_set.txt", checkIfExists: true)]
                input[2] = [[ id:'hgnc_timestamp' ], file("https://github.com/nf-core/test-datasets/raw/rnafusion/testdata/reference/hgnc/HGNC-DB-timestamp.txt", checkIfExists: true)]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("VCF_COLLECT - human - fusionreport - fusioninspector - stub") {

        options "-stub"
        tag "stub"
        config './nextflow.config'

        setup {
            run("STARFUSION_BUILD") {
                script "../../../nf-core/starfusion/build/main.nf"
                process {
                    """
                    input[0] = [
                        [ id:'minigenome_fasta' ],
                        file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/minigenome.fa')
                    ]
                    input[1] = [
                        [ id:'minigenome_gtf' ],
                        file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/minigenome.gtf')
                    ]
                    input[2] = file('https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/modules/data/genomics/homo_sapiens/genome/CTAT_HumanFusionLib.mini.dat.gz')
                    input[3] = "homo_sapiens"
                    input[4] = "http://ftp.ebi.ac.uk/pub/databases/Pfam/releases/Pfam37.4/Pfam-A.hmm.gz"
                    input[5] = Channel.of([
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3f",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3i",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3m",
                        "https://www.dfam.org/releases/Dfam_3.8/infrastructure/dfamscan/homo_sapiens_dfam.hmm.h3p"
                    ])
                    input[6] = "https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/AnnotFilterRule.pm"
                    """
                }
            }

            run("FUSIONINSPECTOR") {
                script "../../fusioninspector/main.nf"
                process {
                    """
                    input[0] = Channel.of([
                        [ id:'test', single_end:false ], // meta map
                        [
                            file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_1.fastq.gz"),
                            file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/v0.0.1/rnaseq_2.fastq.gz")
                        ], // reads
                        [file("https://github.com/FusionInspector/FusionInspector/raw/master/test/fusion_targets.A.txt")]
                    ])
                    input[1] = STARFUSION_BUILD.out.reference
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = Channel.of([ id:'test_sample' ])
                    .combine(FUSIONINSPECTOR.out.abridged_tsv.collect{ meta, tsv -> tsv })
                    .combine(FUSIONINSPECTOR.out.out_gtf.collect{ meta, gtf -> gtf })
                    .combine(Channel.of(file("https://github.com/nf-core/test-datasets/raw/rnafusion/testdata/human/fusionreport/test_sample_fusionreport_index.html", checkIfExists: true)))
                    .combine(Channel.of(file("https://github.com/nf-core/test-datasets/raw/rnafusion/testdata/human/fusionreport/test_sample.fusions.csv", checkIfExists: true)))
                input[1] = [[ id:'hgnc' ], file("https://github.com/nf-core/test-datasets/raw/rnafusion/testdata/reference/hgnc/hgnc_complete_set.txt")]
                input[2] = [[ id:'hgnc_timestamp' ], file("https://github.com/nf-core/test-datasets/raw/rnafusion/testdata/reference/hgnc/HGNC-DB-timestamp.txt")]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
