nextflow_process {

    name "Test Process CTATSPLICING_PREPGENOMELIB"
    script "../main.nf"
    process "CTATSPLICING_PREPGENOMELIB"

    setup {
        run("STARFUSION_BUILD") {
            script "../../../../nf-core/starfusion/build/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome fasta' ],
                    file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/minigenome.fa")
                ]
                input[1] = [
                    [ id:'minigenome gtf' ],
                    file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/minigenome.gtf")
                ]

                input [2] = file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/CTAT_HumanFusionLib.mini.dat.gz")
                input [3] = "homo_sapiens"
                input [4] = "3.8"
                input [5] = "37.4"                """
            }
        }
    }

    test("test") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = STARFUSION_BUILD.out.reference
                input[1] = [
                    file("https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/CANCER_SPLICING_LIB_SUPPLEMENT/cancer_introns.GRCh38.Jun232020.tsv.gz", checkIfExists:true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.reference[0][1]).resolve("AnnotFilterRule.pm"),
                    path(process.out.reference[0][1]).resolve("blast_pairs.dat.gz").exists(),
                    path(process.out.reference[0][1]).resolve("blast_pairs.idx").exists(),
                    path(process.out.reference[0][1]).resolve("__chkpts/annotfiltrule_cp.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/blast_pairs.idx.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/cp_gene_blast_pairs.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/cp_pfam_dat.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/cp_ref_annot_cdna.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/fusion_annot_lib.cp.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/_fusion_annot_lib.idx.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/index_pfam_hits.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/index_ref_annot_cdna.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/makeblastdb.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/mm2_genome_idx.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/mm2.splice_bed.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/_prot_info_db.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/ref_annot.cdsplus.dfam_masked.fa.cp.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/ref_annot.cdsplus.dfam_masked.fa.idx.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/ref_annot.gtf.gene_spans.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/ref_annot.gtf.mini.sortu.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/ref_annot.gtf.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/ref_genome_fai.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/ref_genome.fa.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/trans.blast.dat.cp.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/trans.blast.dat.index.ok"),
                    path(process.out.reference[0][1]).resolve("__chkpts/validate_ctat_genome_lib.ok"),
                    path(process.out.reference[0][1]).resolve("fusion_annot_lib.gz"),
                    path(process.out.reference[0][1]).resolve("fusion_annot_lib.idx").exists(),
                    path(process.out.reference[0][1]).resolve("pfam_domains.dbm").exists(),
                    path(process.out.reference[0][1]).resolve("PFAM.domtblout.dat.gz").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.cdna.fa").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.cdna.fa.idx").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.cds").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.cdsplus.fa").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.cdsplus.fa.idx").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.gtf"),
                    path(process.out.reference[0][1]).resolve("ref_annot.gtf.gene_spans").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.gtf.mini.sortu"),
                    path(process.out.reference[0][1]).resolve("ref_annot.gtf.mm2.splice.bed"),
                    path(process.out.reference[0][1]).resolve("ref_annot.pep").exists(),
                    path(process.out.reference[0][1]).resolve("ref_annot.prot_info.dbm").exists(),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.fai"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.mm2"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.ndb"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.nhr"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.nin").exists(),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.njs").exists(),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.not"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.nsq"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.ntf"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.nto"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx").exists(),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/build.ok"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/chrLength.txt"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/chrNameLength.txt"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/chrName.txt"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/chrStart.txt"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/exonGeTrInfo.tab"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/exonInfo.tab"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/geneInfo.tab"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/Genome"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/genomeParameters.txt").exists(),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/Log.out").exists(),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/SA"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/SAindex"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/sjdbInfo.txt"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/sjdbList.fromGTF.out.tab"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/sjdbList.out.tab"),
                    path(process.out.reference[0][1]).resolve("ref_genome.fa.star.idx/transcriptInfo.tab"),
                    path(process.out.reference[0][1]).resolve("trans.blast.align_coords.align_coords.dat"),
                    path(process.out.reference[0][1]).resolve("trans.blast.align_coords.align_coords.dbm").exists(),
                    path(process.out.reference[0][1]).resolve("trans.blast.dat.gz"),
                    path(process.out.reference[0][1]).resolve("refGene.sort.bed.gz"),
                    path(process.out.reference[0][1]).resolve("refGene.sort.bed.gz.tbi"),
                    path(process.out.reference[0][1]).resolve("cancer_splicing_lib/cancer_splicing.idx").exists(),
                    process.out.version
                ).match()
            }
            )
        }
    }

    test("test - stub") {

        options "-stub"

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = STARFUSION_BUILD.out.reference
                input[1] = [
                    file("https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/CANCER_SPLICING_LIB_SUPPLEMENT/cancer_introns.GRCh38.Jun232020.tsv.gz", checkIfExists:true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.findAll { key, value -> !key.isNumber() }).match() }
            )
        }
    }
}
