nextflow_process {

    name "Test Process CTATSPLICING_PREPGENOMELIB"
    script "../main.nf"
    process "CTATSPLICING_PREPGENOMELIB"

    setup {
        run("STARFUSION_BUILD") {
            script "../../../../nf-core/starfusion/build/main.nf"
            process {
                """
                input[0] = [
                    [ id:'minigenome fasta' ],
                    file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/minigenome.fa")
                ]
                input[1] = [
                    [ id:'minigenome gtf' ],
                    file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/minigenome.gtf")
                ]

                input [2] = file("https://github.com/STAR-Fusion/STAR-Fusion-Tutorial/raw/master/CTAT_HumanFusionLib.mini.dat.gz")
                input [3] = "human"
                """
            }
        }
    }

    test("test") {

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = STARFUSION_BUILD.out.reference
                input[1] = [
                    file("https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/CANCER_SPLICING_LIB_SUPPLEMENT/cancer_introns.GRCh38.Jun232020.tsv.gz", checkIfExists:true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.findAll { key, value -> !key.isNumber() }).match() }
            )
        }
    }

    test("test - stub") {

        options "-stub"

        when {
            params {
                outdir = "$outputDir"
            }
            process {
                """
                input[0] = STARFUSION_BUILD.out.reference
                input[1] = [
                    file("https://data.broadinstitute.org/Trinity/CTAT_RESOURCE_LIB/CANCER_SPLICING_LIB_SUPPLEMENT/cancer_introns.GRCh38.Jun232020.tsv.gz", checkIfExists:true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out.findAll { key, value -> !key.isNumber() }).match() }
            )
        }
    }
}
